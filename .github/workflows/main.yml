name: Go CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Define environment variables at the job level for all steps
    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: testuser
      DB_PASSWORD: testpass
      DB_NAME: testdb
      DB_DRIVER: mysql

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24" # Anda dapat mengubah ini ke versi Go yang lebih baru jika diperlukan

      - name: Cache Go modules
        # Updated to v4
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for MySQL
        run: |
          # Simplified wait command
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"

      - name: Run All Tests and Generate Coverage
        # Combined test steps into one for simplicity
        run: |
          # Create directories for coverage reports
          mkdir -p coverage
          
          # Run tests for all packages and generate individual coverage profiles
          go test -v -race -coverprofile=coverage/repo.out ./internal/repository/tests/...
          go test -v -race -coverprofile=coverage/service.out ./internal/service/tests/...
          go test -v -race -coverprofile=coverage/handler.out ./internal/handler/tests/...

      - name: Generate Combined Coverage Report
        run: |
          # Install gocovmerge if not present
          go install github.com/wadey/gocovmerge@latest
          
          # Merge coverage files from the coverage directory
          gocovmerge coverage/*.out > combined.out
          
          # Generate a single HTML report and function coverage output
          go tool cover -html=combined.out -o coverage.html
          echo "--- Total Coverage ---"
          go tool cover -func=combined.out

      - name: Upload Coverage Artifacts
        # Updated to v4
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.html
            combined.out

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Build application
        run: go build -v -o my-app ./main.go

      - name: Upload build artifact
        # Updated to v4
        uses: actions/upload-artifact@v4
        with:
          name: go-app
          path: my-app

  # docker:
  #   runs-on: ubuntu-latest
  #   needs: [build] # Typically only needs build, as testing is a prerequisite for build
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download build artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: go-app
      
  #     # Make the artifact executable
  #     - name: Make binary executable
  #       run: chmod +x ./go-app

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Extract metadata for Docker
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: your-dockerhub-username/your-app-name

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
      
      # It's a good practice to download dependencies before running security tools
      - name: Install dependencies
        run: go mod download

      - name: Run Go security scanner (gosec)
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./...

      - name: Run Go vulnerability check (govulncheck)
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... > govulncheck-report.txt

      - name: Upload security reports
        # Updated to v4 and ensuring it always runs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            gosec-report.json
            govulncheck-report.txt
