name: Go CI/CD Pipeline

on:
  push:
    # branches: [main, develop]
    branches: [main]
  pull_request:
    # branches: [main, develop]
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"

      - name: Set up test environment
        run: |
          # Setup environment variables for testing
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_PORT=3306" >> $GITHUB_ENV
          echo "DB_USER=testuser" >> $GITHUB_ENV
          echo "DB_PASSWORD=testpass" >> $GITHUB_ENV
          echo "DB_NAME=testdb" >> $GITHUB_ENV
          echo "DB_DRIVER=mysql" >> $GITHUB_ENV

      - name: Run Repository Tests
        run: |
          cd internal/repository/tests
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: testdb

      - name: Run Service Tests
        run: |
          cd internal/service/tests
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: testdb

      - name: Run Handler Tests
        run: |
          cd internal/handler/tests
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
        # env:
        #   DB_HOST: 127.0.0.1
        #   DB_PORT: 3306
        #   DB_USER: testuser
        #   DB_PASSWORD: testpass
        #   DB_NAME: testdb

      - name: Generate Combined Coverage Report
        run: |
          # Install gocovmerge if not exists
          go install github.com/wadey/gocovmerge@latest

          # Merge coverage files
          gocovmerge repository/tests/coverage.out service/tests/coverage.out handler/tests/coverage.out > combined-coverage.out

          # Generate combined coverage report
          go tool cover -html=combined-coverage.out -o combined-coverage.html
          go tool cover -func=combined-coverage.out

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            internal/epository/tests/coverage.html
            internal/service/tests/coverage.html
            internal/handler/tests/coverage.html
            combined-coverage.html
            combined-coverage.out

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Build application
        run: |
          go build -v -o app ./main.go

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: go-app
          path: app

  # docker:
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: your-dockerhub-username/your-app-name
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=sha,prefix={{branch}}-
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Run Go security checker
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./...

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: gosec-report.json
